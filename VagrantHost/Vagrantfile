
# -*- mode: ruby -*-
# vi: set ft=ruby :
# for vm status = Guru Meditation run

# vboxmanage startvm <vm-name> --type emergencystop

#vbguest issues : https://github.com/dotless-de/vagrant-vbguest
#source https://github.com/christianb93/openstack-labs
# instructions: https://leftasexercise.com/2020/01/27/setting-up-our-openstack-playground/

# vagrant cide source

require 'yaml'
server = YAML.load_file('servers.yaml')

puts "Main Script to create OpenStack project"
home_dir=server['work_dir']

unless File.exist?( './servers.yaml' )
  puts "ERROR: file servers.yaml does not exists => abort"
end

Vagrant.configure("2") do |config|

  (server['hosts']).each do |host|
    config.vm.define host['name'] do |node|
      node.vm.hostname = host['hostname']
      node.vm.box = server['box']
      (host['network']).each do |net|
        node.vm.network "#{net['type']}", ip: "#{net['ip']}", auto_config: "#{net['auto_config']}", name: "#{net['name']}"
      end
      (host['ports']).each do |port|
        node.vm.network "forwarded_port", guest: port['guest'], host: port['host']
      end
      node.vm.provider server['provider'] do |v|
        (host['custom']).each do |custom|
          v.customize ["modifyvm", :id, custom['id'], custom['value'] ]
        end
        storage=host['storage']
        if storage != nil
          storage.each do |sto|
            # controller=sto['controller']
            controller=sto['controller']
            disks=sto['disk']
            # ----------- Define disk controller  ------
            unless controller == nil
              controller.each do |ctl|
                unless File.exist?( ctl['filename'] )
                  v.customize ['createhd', ctl['id'], '--filename', ctl['filename'],  '--size', ctl['size'] ]
                end
              end
            end
            # ----------  attach disk  --------------
            if disks != nil
              disks.each do |ctl|
                v.customize ["storageattach", \
                  :id, ctl['id'], ctl['format'], \
                  "--port", ctl['port'], \
                  "--device", ctl['device'], \
                  "--type", ctl['type'], \
                  "--medium", ctl['medium'] ]
              end
            end

          end
        end
      end 
    end  
  end

  ####################################################
  #             AnsibleHost Notes                    #
  # Ansible Host must be configured at the end       #
  # because the use of settings defined previously   #
  ####################################################
  config.vm.define "AnsibleHost" do |host|
    host.vm.hostname = "AnsibleHost.local"
    host.vm.box = "ubuntu/bionic64"
    host.vm.provision "ansible286", type: "shell", path: "bootstrap.sh", privileged: true
    host.vm.network "private_network", ip: "192.168.56.100", name: "VirtualBox Host-Only Ethernet Adapter"
    host.vm.synced_folder  "../../OpenStack_Local/AnsibleHost", "/home/vagrant/AnsibleHost", owner: "vagrant"  #, mount_options: ["dmode=775,fmode=777"]

    # upload private keys created by vagrant, check to change using vagrant loops
    (server['hosts']).each do |ssh|
      sourcePath = "./.vagrant/machines/#{ssh['name']}/virtualbox/private_key"
      targetPath = "#{home_dir}/.ssh/machines/#{ssh['name']}/virtualbox/private_key"
      host.vm.provision "file", source: sourcePath, destination: targetPath    
    end
    host.vm.provision "file", source: "./ssh-config", destination: "#{home_dir}/.ssh/config"

    host.vm.provision "shell", inline: "chmod 600 $(find #{home_dir}/.ssh/machines -type f -name 'private_key')"
    host.vm.provision "shell", inline: "chmod 700 $(find #{home_dir}/.ssh/machines -type d)"

    # copy the content of ansible.cfg to /etc/ansible
    host.vm.provision "file", source: "./ansible/ansible.cfg", destination: "#{home_dir}/.ansible.cfg"  
    host.vm.provision "file", source: "./ansible/hosts.ini", destination: "#{home_dir}/hosts.ini" 
    host.vm.provision "shell", inline: "chmod 600 #{home_dir}/hosts.ini", privileged: true 
    host.vm.provision "shell", inline: "chmod 600 #{home_dir}/.ansible.cfg", privileged: true


    host.vm.provider "virtualbox" do |v|
      v.name   = "AnsibleHost"
      v.memory = 6144
      v.cpus = 1
    end
  end

end